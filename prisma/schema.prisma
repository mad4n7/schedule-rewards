generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum BusinessRewardStatus {
  ACTIVE
  INACTIVE
  EXPIRED
}

enum BusinessRewardType {
  POINTS
  VISITS
  AMOUNT
}

enum BusinessStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum BusinessTimeSlotStatus {
  AVAILABLE
  UNAVAILABLE
  BLOCKED
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum RewardRedemptionStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  EXPIRED
  CANCELLED
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model AppointmentServices {
  id                  String            @id @default(cuid())
  appointment_id      String
  business_service_id String
  price               Decimal           @db.Decimal(10, 2)
  duration            Int
  order               Int               @default(0)
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  appointments        Appointments      @relation(fields: [appointment_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  business_services   BusinessServices   @relation(fields: [business_service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([appointment_id, order])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Appointments {
  id                    String                 @id @default(cuid())
  business_id           String
  customer_id           String
  business_time_slot_id String
  start_datetime        DateTime               @db.Timestamp(0)
  end_datetime          DateTime               @db.Timestamp(0)
  duration              Int
  total_price           Decimal                @default(0) @db.Decimal(10, 2)
  customer_notes        String?
  business_notes        String?
  status                AppointmentStatus      @default(PENDING)
  confirmed_at          DateTime?              @db.Timestamp(0)
  cancelled_at          DateTime?              @db.Timestamp(0)
  cancellation_reason   String?                @db.VarChar(255)
  created_at            DateTime?              @db.Timestamp(0)
  updated_at            DateTime?              @db.Timestamp(0)
  deleted_at            DateTime?              @db.Timestamp(0)
  appointment_services  AppointmentServices[]
  businesses            Businesses             @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  business_time_slots   BusinessTimeSlots    @relation(fields: [business_time_slot_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers             Customers              @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([business_id, start_datetime])
  @@index([customer_id, start_datetime])
  @@index([status, start_datetime])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model BusinessRewards {
  id                          String                        @id @default(cuid())
  business_id                 String
  name                        String                        @db.VarChar(255)
  description                 String
  type                        BusinessRewardType            @default(POINTS)
  points_required             Int                           @default(0)
  visits_required             Int                           @default(0)
  amount_required             Decimal                       @default(0) @db.Decimal(10, 2)
  valid_from                  DateTime?                     @db.Date
  valid_until                 DateTime?                     @db.Date
  status                      BusinessRewardStatus          @default(ACTIVE)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  deleted_at                  DateTime?                     @db.Timestamp(0)
  businesses                  Businesses                    @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer_reward_redemptions CustomerRewardRedemptions[]
}

model BusinessSchedules {
  id                 String     @id @default(cuid())
  business_id        String
  day_of_week        Int        @db.SmallInt
  start_time         DateTime   @db.Time(0)
  end_time           DateTime   @db.Time(0)
  is_closed          Boolean    @default(false)
  slot_duration      Int        @default(30)
  slots_per_interval Int        @default(1)
  created_at         DateTime?  @db.Timestamp(0)
  updated_at         DateTime?  @db.Timestamp(0)
  deleted_at         DateTime?  @db.Timestamp(0)
  businesses         Businesses @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([business_id, day_of_week])
}

model BusinessServices {
  id                   String                 @id @default(cuid())
  name                 String                 @db.VarChar(255)
  description          String?
  price                Decimal?               @db.Decimal(10, 2)
  duration             Int?
  created_at           DateTime?              @db.Timestamp(0)
  updated_at           DateTime?              @db.Timestamp(0)
  deleted_at           DateTime?              @db.Timestamp(0)
  appointment_services AppointmentServices[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model BusinessTimeSlots {
  id           String                  @id @default(cuid())
  business_id  String
  date         DateTime                @db.Date
  start_time   DateTime                @db.Time(0)
  end_time     DateTime                @db.Time(0)
  capacity     Int                     @default(1)
  booked_count Int                     @default(0)
  is_available Boolean                 @default(true)
  status       BusinessTimeSlotStatus  @default(AVAILABLE)
  notes        String?
  created_at   DateTime?               @db.Timestamp(0)
  updated_at   DateTime?               @db.Timestamp(0)
  deleted_at   DateTime?               @db.Timestamp(0)
  appointments Appointments[]
  businesses   Businesses              @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([business_id, date, start_time])
}

model BusinessUser {
  id          String     @id @default(cuid())
  business_id String
  user_id     String
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  businesses  Businesses @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([business_id, user_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Businesses {
  id                          String              @id @default(cuid())
  name                        String              @db.VarChar(255)
  description                 String
  user_id                     String
  category_id                 String
  location_id                 String
  status                      BusinessStatus      @default(ACTIVE)
  deleted_at                  DateTime?           @db.Timestamp(0)
  created_at                  DateTime?           @db.Timestamp(0)
  updated_at                  DateTime?           @db.Timestamp(0)
  appointments                Appointments[]
  business_rewards            BusinessRewards[]
  business_schedules          BusinessSchedules[]
  business_time_slots         BusinessTimeSlots[]
  business_user               BusinessUser[]
  categories                  Categories          @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations                   Locations           @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users                       User               @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customer_reward_progress    CustomerRewardProgress[]
  customer_reward_redemptions CustomerRewardRedemptions[]
  services                    Services[]
}

model Business {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  planId      String
  plan        Plan      @relation(fields: [planId], references: [id])
  active      Boolean   @default(false)
  payments    Payment[]

  @@index([userId])
  @@index([planId])
}

model Categories {
  id          String       @id @default(cuid())
  name        String       @db.VarChar(255)
  slug        String       @unique @db.VarChar(255)
  description String?
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  deleted_at  DateTime?    @db.Timestamp(0)
  businesses  Businesses[]
}

model CustomerRewardProgress {
  id                 String     @id @default(cuid())
  customer_id        String
  business_id        String
  points_balance     Int        @default(0)
  visits_count       Int        @default(0)
  total_amount_spent Decimal    @default(0) @db.Decimal(10, 2)
  created_at         DateTime?  @db.Timestamp(0)
  updated_at         DateTime?  @db.Timestamp(0)
  businesses         Businesses @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers          Customers  @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([customer_id, business_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model CustomerRewardRedemptions {
  id                 String                @id @default(cuid())
  customer_id        String
  business_id        String
  business_reward_id String
  points_used        Int                  @default(0)
  visits_used        Int                  @default(0)
  amount_applied     Decimal              @default(0) @db.Decimal(10, 2)
  status            RewardRedemptionStatus @default(PENDING)
  redeemed_at       DateTime?             @db.Timestamp(0)
  created_at        DateTime?             @db.Timestamp(0)
  updated_at        DateTime?             @db.Timestamp(0)
  deleted_at        DateTime?             @db.Timestamp(0)
  businesses        Businesses            @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  business_rewards  BusinessRewards      @relation(fields: [business_reward_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  customers         Customers             @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model Customers {
  id                          String                        @id @default(cuid())
  user_id                     String
  phone_number                String?                       @db.VarChar(255)
  birth_date                  DateTime?                     @db.Date
  status                      CustomerStatus                @default(ACTIVE)
  created_at                  DateTime?                     @db.Timestamp(0)
  updated_at                  DateTime?                     @db.Timestamp(0)
  deleted_at                  DateTime?                     @db.Timestamp(0)
  appointments                Appointments[]
  customer_reward_progress    CustomerRewardProgress[]
  customer_reward_redemptions CustomerRewardRedemptions[]
  users                       User                          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Locations {
  id          String       @id @default(cuid())
  address     String       @db.VarChar(255)
  city        String       @db.VarChar(255)
  state       String       @db.VarChar(255)
  country     String       @db.VarChar(255)
  postal_code String       @db.VarChar(255)
  latitude    Decimal?     @db.Decimal(10, 8)
  longitude   Decimal?     @db.Decimal(11, 8)
  created_at  DateTime?    @db.Timestamp(0)
  updated_at  DateTime?    @db.Timestamp(0)
  deleted_at  DateTime?    @db.Timestamp(0)
  businesses  Businesses[]
}

model Plan {
  id          String     @id @default(cuid())
  name        String
  description String?
  price       Decimal    @db.Decimal(10, 2)
  duration    Int        // Duration in days
  features    String[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  businesses  Business[]
}

model Payment {
  id          String    @id @default(cuid())
  amount      Decimal   @db.Decimal(10, 2)
  status      PaymentStatus
  pixCode     String    // PIX code for payment
  expiresAt   DateTime
  paidAt      DateTime?
  businessId  String
  business    Business  @relation(fields: [businessId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([businessId])
}

model Services {
  id          String     @id @default(cuid())
  business_id String
  name        String     @db.VarChar(255)
  description String
  price       Decimal    @db.Decimal(10, 2)
  duration    Int
  created_at  DateTime?  @db.Timestamp(0)
  updated_at  DateTime?  @db.Timestamp(0)
  businesses  Businesses @relation(fields: [business_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  password      String?
  language      String      @default("en")
  verificationToken String?   @unique
  accounts      Account[]
  sessions      Session[]
  businessUser  BusinessUser[]
  businesses    Business[]
  oldBusinesses Businesses[]  // Add relation to old businesses
  customers     Customers[]
  created_at    DateTime?    @db.Timestamp(0)
  updated_at    DateTime?    @db.Timestamp(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
